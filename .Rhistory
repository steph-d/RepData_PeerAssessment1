y<-0.5 + 2*xx + c
summary(y)
plot(xx,y)
set.seed(1)
xxx<-rnorm(100)
log.mu<-0.5+0.3*xxx
y<-rpois(100,exp(log.mu))
summary(y)
plot(xxx,y)
set.seed(1)
sample(1:10,4) # sample 4 nb without replacement inside 1:10
sample(letters, 5) # the same
sample(1:10) # permutation
sample(1:10, replace=TRUE) # sample with replacement
system.time(readLines("http://www.jhsph.edu"))
hilbert <- function(n) {
i<-1:n
1/outer(i-1,i,"+")
}
hilbert(1000)
x<-hilbert(1000)
system.time(svd(x))
system.time(readLines("http://www.jhsph.edu"))
system.time({
n<- 1000
r <- numeric(n)
for (i in 1:n) {
x<-rnorm(n)
r[i]<-mean(x)
}
})
sample.interval=10000
lm(y~x)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx "
download.file(fileUrl, destfile = "Q3.xlsx")
dateDownloaded <- date()
dateDownloaded
library(Xlsx)
library(xlsx)
install.packages("rJava")
library(xlsx)
library(rJava)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx "
download.file(fileUrl, destfile = "Q3.xlsx")
dateDownloaded <- date()
dateDownloaded
library(rJava)
?Old.R.RunMe()
?Old.R.RunMe
??Old.R.RunMe
library(installr)
install.packages("installr")
create.global.library("D:/R/win-library/library")
library(installr)
create.global.library("D:/R/win-library/library")
copy.packages.between.libraries(ask=T)
copy.packages.between.libraries("C:/PROGRA~1/R/R-3.1.2","D:/R/win-library/library")
add.installr.GUI()
.libPaths()
.libPaths(global.library.folder)
library(installr)
.libPaths("D:/R/win-library/library")
.libPaths()
.libPaths()
Old.R.RunMe <- function (global.library.folder = "D:/R/win-library/library", quit.R = NULL)
{
# It will:
# 1. Create a new global library folder (if it doesn't exist)
# 2. Copy to the new "global library folder" all of your packages from the old R installation
# checking that the global lib folder exists - and if not -> create it.
if(!file.exists(global.library.folder))
{	# If global lib folder doesn't exist - create it.
dir.create(global.library.folder)
print(paste("The path:" , global.library.folder, "Didn't exist - and was now created."))
} else {
print(paste("The path:" , global.library.folder, "already exist. (no need to create it)"))
}
print("-----------------------")
print("I am now copying packages from old library folder to:")
print(global.library.folder)
print("-----------------------")
flush.console()  # refresh the console so that the user will see the massage
# Copy packages from current lib folder to the global lib folder
list.of.dirs.in.lib <- paste( paste(R.home(), "\library\", sep = ""),
list.files(paste(R.home(), "\library\", sep = "")),
sep = "")
folders.copied <- file.copy(from = list.of.dirs.in.lib, 	# copy folders
to = global.library.folder,
overwrite = TRUE,
recursive =TRUE)
print("Success.")
print(paste("We finished copying all of your packages (" , sum(folders.copied), "packages ) to the new library folder at:"))
print(global.library.folder)
print("-----------------------")
# To quite R ?
if(is.null(quit.R))
{
print("Can I close R?  y(es)/n(o)  (WARNING: your environment will *NOT* be saved)")
answer <- readLines(n=1)
} else {
answer <- quit.R
}
if(tolower(answer)[1] == "y") quit(save = "no")
}
Old.R.RunMe()
.libPaths()
help(Startup)
library(installr)
library(installr)
update(R)
updateR()
.libPaths()
.libPaths()
.libPaths()
.libPaths()
library(swirl)
swirl()
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv("path2.csv", stringAsFactors=FALSE)
mydf <- read.csv("path2csv", stringsAsFactors=FALSE)
mydf <- read.csv("path2.csv", stringsAsFactors=FALSE)
mydf <- read.csv(file="path2.csv", stringsAsFactors=FALSE)
library(dplyr)
mydf <- read.csv(file="path2.csv", stringsAsFactors=FALSE)
mydf <- read.csv("path2csv", stringsAsFactors=FALSE)
info()
mydf <- read.csv("path2csv", stringsAsFactors=FALSE)
mydf <- read.csv("path2.csv", stringsAsFactors=FALSE)
bye()
install.packages("RMySQL")
library(RMySQL)
ucscDb <- dbConnect(MySQL(), user="genome", host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb, "show databases;"); dbDisconect(ucscDb)
result <- dbGetQuery(ucscDb, "show databases;"); dbDisconnect(ucscDb)
result
hg19 <- dbConnect(MySQL(), user="genome", db="hg19", host="genome-mysql.csc.ucsc.edu")
hg19 <- dbConnect(MySQL(), user="genome", db="hg19", host="genome-mysql.cse.ucsc.edu")
allTables <- dbListTables(hg19)
length(allTables)
allTables[1:5]
# to see the fields in a particular table affyU133Plus2 from the database hg19
dbListFields(hg19, "affyU133Plus")
dbListFields(hg19, "apiMel1")
hg19 <- dbConnect(MySQL(), user="genome", db="hg19", host="genome-mysql.cse.ucsc.edu")
allTables <- dbListTables(hg19)
length(allTables)
allTables[1:5]
dbListFields(hg19, "HInvGeneMrna")
dbGetQuery(hg19, "select count(*) from HInvGeneMrna")
# to see the fields in a particular table HInvGeneMrna from the database hg19
dbListFields(hg19, "HInvGeneMrna")
# to count the number of records inside this table:
dbGetQuery(hg19, "select count(*) from HInvGeneMrna")
# to read from the table:
HinvData <- dbReadTable(hg, "HinvGeneMrna")
# to read from the table:
HinvData <- dbReadTable(hg19, "HinvGeneMrna")
# to read from the table:
HinvData <- dbReadTable(hg19, "HInvGeneMrna")
head(HinvData)
query <- dbSendQuery(hg19, "select * from HInvGeneMrna where misMatches between 1 and 3")
HInvmis <- fetch(query), qualtile(Hinvmis$misMatches)
HInvmis <- fetch(query); quantile(Hinvmis$misMatches)
HInvmis <- fetch(query); quantile(HInvmis$misMatches)
HInvmisSmall <- fetch(query, n=10); dbClearResult(query)
dim(HInvmisSmall)
dbDisconnect(hg19)
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(rhdf5)
created = h5createFile("example.h5")
created
created = h5createGroup("example.h5","foo")
created = h5createGroup("example.h5","baa")
created = h5createGroup("example.h5","foo/foobaa")
h5ls("example.h5")
A=matrix(1:10, nr=5, nc=2)
h5write(A,"example.h5","foo/A")
B=array(seq(0.1, 2.0, by=0.1), dim=c(5,2,2))
attr(B, "scale") <- "liter"
h5write(B, "example.h5","foo/foobaa/B")
h5ls("example.h5")
df=data.frame(1L:5L, seq(0,1,length.out=5), c("a","cde","fghi","a","s"), stringsAsFactors=FALSE)
h5write(df,"example.h5","df")
h5ls("example.h5")
readA=h5read("example.h5","foo/A")
readB=h5read("example.h5","foo/foobaa/B")
readdf=h5read("example.h5","df")
readA
readB
readdf=h5read("example.h5","df")
# writing and reading chunks
# to write 12-13-14 inside a dataset instead of 1-2-3 values
h5write(c(12,13,14), "example.h5", "foo/A", index=list(1:3,1))
h5read("example.h5","foo/A")
con=url("http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en")
htmlCode = readLines(con)
close(con)
htmlCode
library(XML)
html <- htmlTreeParse(url, useInternalNodes=TRUE)
url <- "http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en"
html <- htmlTreeParse(url, useInternalNodes=TRUE)
xpathSApply(html, "//title", xmlValue
)
xpathSApply(html, "//td@id='col-citedby']", xmlValue)
xpathSApply(html, "//td[@id='col-citedby']", xmlValue)
xpathSApply(html, "//td[@id='gsc_a_ca']", xmlValue)
install.packages("httr")
library(httr)
html2=GET(url)
content2 = content(html2, as="text")
parsedHtml = htmlParse(content2, asText=TRUE)
xpathSApply(parsedHtml, "//title", xmlValue)
xpathSApply(html, "//td[@class='gsc_a_c']", xmlValue)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
acs <- download.file (url, destfile="acs.csv")
install.packages("sqldf")
library(sqldf)
sqldf("select * from acs where AGEP < 50 and pwgtp1")
sqldf("select pwgtp1 from acs where AGEP < 50")
str(acs)
acs<-read.csv("acs.csv", header=TRUE, sep=",")
sqldf("select * from acs where AGEP < 50 and pwgtp1")
sqldf("select pwgtp1 from acs where AGEP < 50")
sqldf("select * from acs where AGEP < 50 and pwgtp1")
sqldf("select unique AGEP from acs")
sqldf("select distinct AGEP from acs")
?nchar
library(XML)
html <- htmlTreeParse(urlQ4, useInternalNodes=TRUE)
urlQ4 <- "http://biostat.jhsph.edu/~jleek/contact.html"
html <- htmlTreeParse(urlQ4, useInternalNodes=TRUE)
html <- htmlTreeParse(urlQ4, useInternalNodes=TRUE)
html <- htmlTreeParse(urlQ4, useInternalNodes=TRUE)
?xpathSApply
con=url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode = readLines(con)
close(con)
htmlCode
con=url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode = readLines(con)
close(con)
htmlCode
nchar(htmlCode[10])
nchar(htmlCode[20])
nchar(htmlCode[30])
nchar(htmlCode[100])
urlQ5 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for "
download.file(urlQ5, destfile="Q5.txt")
download.file(urlQ5, destfile="Q5.txt")
download.file(urlQ5, destfile="Q5.txt")
d<-read.table("Q5.txt", sep="/t")
d<-read.fwf("Q5.txt", widths(c(10,9,4,9,4,9,4,9,4),sep="")
)
d<-read.fwf("Q5.txt", widths=c(10,9,4,9,4,9,4,9,4),sep="")
d<-read.fwf("Q5.txt", widths=c(10,9,4,9,4,9,4,9,4),sep="",col.names=TRUE)
d<-read.fwf("Q5.txt", widths=c(10,9,4,9,4,9,4,9,4),sep="",skip=1)
d<-read.fwf("Q5.txt", widths=c(10,9,4,9,4,9,4,9,4),sep="",skip=2)
d<-read.fwf("Q5.txt", widths=c(15,9,4,9,4,9,4,9,4),sep="",skip=2)
d<-read.fwf("Q5.txt", widths=c(15,9,4,9,4,9,4,9,4),sep="",skip=4)
d<-read.fwf("Q5.txt", widths=c(15,9,4,9,4,9,4,9,4),sep="",skip=c(1:4))
d<-read.fwf("Q5.txt", widths=c(10,9,4,9,4,9,4,9,4),sep="",skip=c(1:4))
d<-read.fwf("Q5.txt", widths=c(10,9,4,9,4,9,4,9,4),sep="",skip=4)
d<-read.fwf("Q5.txt", widths=c(10,9,4,9,4,9,4,9,4),skip=4)
d<-read.fwf("Q5.txt", widths=c(10,9,4,9,4,9,4,9,4),skip=4,col.names=c("Week","SST1","SSTA1","SST3","SSTA3","SST34","SSTA34","SST4","SSTA4"))
head(d)
sum(d$SST3)
set.seed(13435)
X <- data.frame("var1"=sample(1:5), "var2"=sample(6:10), "var3"=sample(11:15))
X
X <- X[sample(1:5),]
X <- X[sample(1:5),]; X$var2[c(1,3)]=NA
X
set.seed(13435)
X <- data.frame("var1"=sample(1:5), "var2"=sample(6:10), "var3"=sample(11:15))
X <- X[sample(1:5),]; X$var2[c(1,3)]=NA
X
X[1]
X[,1]
X[,"var1"]
X[1:2,"var2"]
X[(X$var1 <= 3 & X$var3 >11),]
X[(X$var1 <=3 | X$var3 >15)]
X[(X$var1 <=3 | X$var3 >15),]
X[(X$var1 <=3 | X$var3 ==15),]
X[which(X$var2 > 8),]
sort(X$var1)
sort(X$var1, decreasing=TRUE)
sort(X$var2, na.last=TRUE)
X[order(X$var1),]
X[order(X$var1,X$var3),]
library(plyr)
arrange(X,var1)
arrange(X,desc(var1))
X$var4 <- rnorm(5)
X
Y <- cbind(X,rnorm(5))
Y
Z <- rbind(X,c(18,10,24,0.003,0.004))
Z
if(!file.exists("./data")){dir.create("./data")}
fileUrl <- "https://data.baltimorecity.gov/api/views/k5ry-ef3g/rows.csv?accessType=DOWNLOAD"
download.file(fileUrl, destfile=".data/restaurants.csv", methord="curl")
download.file(fileUrl, destfile=".data/restaurants.csv")
setwd("D:/R/R-travail/MOOC R programming march2015")
if(!file.exists("./data")){dir.create("./data")}
fileUrl <- "https://data.baltimorecity.gov/api/views/k5ry-ef3g/rows.csv?accessType=DOWNLOAD"
download.file(fileUrl, destfile=".data/restaurants.csv")
download.file(fileUrl, destfile="restaurants.csv")
restData <- read.csv("./data/restaurants.csv")
restData <- read.csv("restaurants.csv")
head(restData,n=3)
tail(restData,n=3)
summary(restData)
str(restData)
quantile(restData$coucilDistrict, na.rm=TRUE)
quantile(restData$councilDistrict, probs=c(0.5, 0.75, 0.9))
quantile(restData$councilDistrict, na.rm=TRUE)
table(restData$zipCode, use.na="ifany")
table(restData$zipCode, useNA="ifany")
table(restData$councilDistrict, restData$zipCode)
sum(is.na(restData$councilDistrict))
any(is.na(restData$councilDistrict))
all(restData$zipCode>0)
colSums(is.na(restData)) # to obtain the number of NA per column
all(colSums(is.na(restData))=0) # to ask if all the columns are without NA
all(colSums(is.na(restData))==0) # to ask if all the columns are without NA
table(restData$zipCode %in% c("21212"))
table(restData$zipCode %in% c("21212","21213"))
restData[restData$zipCode %in% c("21212","21213"),]
data(UCBAdmissions)
DF = as.data.frame(UCBAdmissions)
summary(DF)
xt <- xtabs(Freq~Gender+Admit, data=DF)
xt
head(warpbreaks)
summary(warpbreaks)
warpbreaks$replicate <- rep(1:9, len=54)
head(warpbreaks)
xt <- xtabs(breaks~., data=warpbreaks)
xt
ftable(xt) # do a flat table to resume the information
fakeData = rnorm(1e5)
object.size(fakeData)
print(object.size(fakeData), units="Mb")
x <- c(1,3,8,25,100);x
seq(along=x)
s1 <- seq(1,10,by=2)
S1
s1 <- seq(1,10,by=2)
s1
s2 <- seq(1,10,legth=3)
s2 <- seq(1,10,length=3)
s2
x <- c(1,3,8,25,100)
seq(along=x)
restData$nearMe <- restData$neighborhood %in% c("Roland Park", "Homeland")
table(restData$nearMe)
restData$zipWrong <- ifelse(restData$zipCode < 0, TRUE, FALSE)
table(restData$zipWrong, restData$zipCode <0)
restData$zipGroups = cut(restData$zipCode, breaks=quantile(restData$zipCode))
table(restData$zipGroups)
table(restData$zipGroups, restData$zipCode)
library(Hmisc)
install.packages("Hmisc")
library(Hmisc)
restData$zipGroups = cut2(restData$zipCode,g=4)
table(restData$zipGroups)
restData$zcf <- factor(restData$zipCode)
restData$zcf[1:10]
class(restData$zcf)
yesno <- sample(c("yes","no"), size=10,replace=TRUE)
yesno
yesnofac = factor(yesno, levels=c("yes","no"))
yesnofac
relevel(yesnofac,ref="yes")
as.numeric(yesnofac)
setwd("D:/R/R-travail/MOOC R programming march2015/5-Reproducible research/RepData_PeerAssessment1/RepData_PeerAssessment1")
d <- read.csv("activity.csv")
head(d)
dim(d)
d$date <- as.Date(d$Date, format="%Y-%m-%d")
str(d)
d$date <- as.Date(d$date, format="%Y-%m-%d")
str(d)
getwd()
str(d)
library(dplyr)
d %>% group_by(date) %>% mean(steps)
d %>% group_by(date) %>% mean(steps, na.rm=TRUE)
head(d)
d$interval <- as.numeric(d$interval)
str(d)
d$steps <- as.numeric(d$steps)
str(d)
d %>% group_by(date) %>% sum(steps, na.rm=TRUE)
d %>% group_by(d$date) %>% sum(d$steps, na.rm=TRUE)
sum(d$steps, na.rm=TRUE)
d %>% group_by(d, date) %>% sum(d$steps, na.rm=TRUE)
d %>% group_by(d, date) %>% sum(d$steps, na.rm=TRUE)
tapply(d$steps, s$date,sum)
tapply(d$steps, d$date,sum, na.rm=TRUE)
hist(meanstep)
meanstep <- tapply(d$steps, d$date,sum, na.rm=TRUE)
hist(meanstep)
hist(sumstep, xlab="Total number of steps per day", main="Distribution of frequency of the total steps per day")
sumstep <- tapply(d$steps, d$date,sum, na.rm=TRUE)
hist(sumstep, xlab="Total number of steps per day", main="Distribution of frequency of the total steps per day")
hist(sumstep, xlab="Total number of steps per day", main="Distribution of frequency of the total steps per day", col="grey")
hist(sumstep, xlab="Total number of steps per day", main="Distribution of frequency of the total steps per day", col="grey", breaks=10)
hist(sumstep, xlab="Total number of steps per day", main="Distribution of frequency of the total steps per day", col="grey", breaks=10, xlim=25000)
hist(sumstep, xlab="Total number of steps per day", main="Distribution of frequency of the total steps per day", col="grey", breaks=10, xlim=(0,25000)
hist(sumstep, xlab="Total number of steps per day", main="Distribution of frequency of the total steps per day", col="grey", breaks=10, xlim=0:25000)
hist(sumstep, xlab="Total number of steps per day", main="Distribution of frequency of the total steps per day", col="grey", breaks=10, xlim=(0:25000))
hist(sumstep, xlab="Total number of steps per day", main="Distribution of frequency of the total steps per day", col="grey", breaks=10, xlim=c(0,25000))
hist(sumstep, xlab="Total number of steps per day", main="Distribution of frequency of the total steps per day", col="grey", breaks=11)
hist(sumstep, xlab="Total number of steps per day", main="Distribution of frequency of the total steps per day", col="grey", breaks=12)
hist(sumstep, xlab="Total number of steps per day", main="Distribution of frequency of the total steps per day", col="grey", breaks=8)
hist(sumstep, xlab="Total number of steps per day", main="Distribution of frequency of the total steps per day", col="grey", breaks=3)
hist(sumstep, xlab="Total number of steps per day", main="Distribution of frequency of the total steps per day", col="grey", breaks=6)
meanstep <- tapply(d$steps, d$date,mean, na.rm=TRUE)
meanstep
sumstep
medianstep <- tapply(d$steps, d$date,median, na.rm=TRUE)
medianstep
meanstep <- mean(sumstep, na.rm=TRUE)
meanstep
medianstep <- median(sumstep, na.rm=TRUE)
medianstep
So the mean is equal to `r round(meanstep,0)` and the median to `r medianstep('axis')`.
knitr::knit_hooks$set(inline = as.character)
d <- read.csv("activity.csv")
d$date <- as.Date(d$date, format="%Y-%m-%d")
d$steps <- as.numeric(d$steps)
str(d)
d$interval <- as.factor(d$interval)
str(d)
meanstepinterval <- tapply(d$steps, d$interval, mean, na.rm=TRUE)
meanstepinterval
mean(meanstepinterval)
meanstepinterval <- tapply(d$steps, d$interval, sum, na.rm=TRUE)
meanstepinterval
91/61
sum(d$date)
d$date[17568]-d$date[1]
91/60
18/60
plot(meanstepinterval, type="l")
plot(meanstepinterval, d$interval, type="l")
plot(meanstepinterval, unique(d$interval), type="l")
table(d$interval)
plot(meanstepinterval, levels(d$interval), type="l")
plot(x=meanstepinterval, y=levels(d$interval), type="l")
plot(y=meanstepinterval, x=levels(d$interval), type="l")
plot(y=meanstepinterval, x=levels(d$interval)/60, type="l")
xaxis <- levels(d$interval/60)
xaxis <- as.numeric(levels(d$interval))/60
xaxis
xaxis <- as.numeric(levels(d$interval))
xaxis
plot(y=meanstepinterval, x=seq(0,24,1/12), type="l")
xaxis <- seq(0,24,1/12)
xaxis
xaxis <- round(seq(0,24,1/12),1)
xaxis
plot(y=meanstepinterval, x=xaxis, type="l")
meanstepinterval
length(meanstepinterval)
length(xaxis)
xaxis <- round(seq(1/12,24,1/12),1)
plot(y=meanstepinterval, x=xaxis, type="l")
plot(y=meanstepinterval, x=xaxis, type="l", main=Average daily activity pattern, xlab="Time (hours)", ylab="Mean number of steps", col="blue")
plot(y=meanstepinterval, x=xaxis, type="l", main="Average daily activity pattern", xlab="Time (hours)", ylab="Mean number of steps", col="blue")
```{r maxsteps,comment=FALSE}
max(meanstepinterval)
meanstepinterval <- tapply(d$steps, d$interval, mean, na.rm=TRUE)
xaxis <- round(seq(1/12,24,1/12),1)
plot(y=meanstepinterval, x=xaxis, type="l", main="Average daily activity pattern", xlab="Time (hours)", ylab="Mean number of steps", col="blue")
plot(y=meanstepinterval, x=xaxis, type="l", main="Average daily activity pattern", xlab="Time (hours)", ylab="Mean number of steps", col="blue")
meanstepinterval
max(meanstepinterval)
meanstepinterval[1]
sort(meanstepinterval)
sort(meanstepinterval, decreasing=TRUE)
library(base)
meanstepinterval <- tapply(d$steps, d$interval, mean, na.rm=TRUE)
Position(meanstepinterval==max(meanstepinterval, meanstepinterval))
Position(meanstepinterval==max(meanstepinterval, x=meanstepinterval))
Position(max(meanstepinterval, x=meanstepinterval))
Position(max(meanstepinterval), x=meanstepinterval)
Position(if(meanstepinterval=max(meanstepinterval)), x=meanstepinterval, nomatch=NA)
match(max(meanstepinterval),meanstepinterval)
match(max(meanstepinterval),meanstepinterval) / 60
meanstepinterval
cbind(xaxis,meanstpeinterval)
cbind(xaxis,meanstepinterval)
d[,max(meanstepinterval)]
d[,meanstepinterval=max(meanstepinterval)]
d[,meanstepinterval==max(meanstepinterval)]
sub<-cbind(xaxis,meanstepinterval)
sub[,meanstepinterval==max(meanstepinterval)]
sub[meanstepinterval==max(meanstepinterval),]
sub[which(sub$meanstepinterval==max(meanstepinterval),]
value<-sub[meanstepinterval==max(meanstepinterval),]
value[1]
value[[1]]
value[[1]]-1/12
sub<-cbind(seq(1/12,24,1/12),meanstepinterval)
value<-sub[meanstepinterval==max(meanstepinterval),]
value[[1]]
